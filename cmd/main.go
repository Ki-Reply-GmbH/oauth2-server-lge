// Package main provides an OAuth2 server implementation.
//
// @title                Simple OAuth2 Server API
// @version              1.0.0
// @description          A simple OAuth2 server that supports client credentials flow
// @contact.name         API Support
// @contact.url          https://cariad.example.com/support
// @contact.email        support@cariad.example.com
// @license.name         MIT
// @license.url          https://opensource.org/licenses/MIT
// @host                 localhost:5555
// @BasePath             /
// @schemes              http
// @securityDefinitions.basic  BasicAuth
package main

import (
	"cmp"
	"crypto/sha256"
	"crypto/subtle"
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	httpSwagger "github.com/swaggo/http-swagger"
	"kireply.de/simple-oauth2-server/internal/keys"
	"kireply.de/simple-oauth2-server/internal/token"

	// Import the docs generated by swag
	_ "kireply.de/simple-oauth2-server/docs"
)

// TokenRequest represents a client credentials token request
// @Description Token request payload for client credentials flow
type TokenRequest struct {
	// Grant type for OAuth2 token request, only client_credentials is supported
	GrantType string `json:"grant_type"`
	// Space-separated OAuth scopes being requested
	Scope string `json:"scope"`
}

// TokenResponse represents an OAuth2 token response
// @Description Successful token response
type TokenResponse struct {
	// JWT access token
	AccessToken string `json:"access_token"`
	// Type of the token (always Bearer)
	TokenType string `json:"token_type"`
	// Time in seconds until the token expires
	ExpiresIn int `json:"expires_in"`
	// Space-separated scopes granted to the token
	Scope string `json:"scope,omitempty"`
}

// ErrorResponse represents an OAuth2 error response
// @Description Error response structure
type ErrorResponse struct {
	// OAuth2 error code
	Error string `json:"error"`
	// Human-readable error description
	Description string `json:"error_description,omitempty"`
}

// HealthResponse represents a health check response
// @Description Health check response
type HealthResponse struct {
	// Status of the server (ok when healthy)
	Status string `json:"status"`
}

// Application represents the main application with its dependencies
type Application struct {
	auth struct {
		username string
		password string
	}
	keyManager   *keys.KeyManager
	tokenService *token.Service
}

func main() {
	// Initialize application
	app := new(Application)

	// Get basic auth username + password from environment
	app.auth.username = os.Getenv("AUTH_USERNAME")
	app.auth.password = os.Getenv("AUTH_PASSWORD")

	// Get Port from environment
	port := cmp.Or(os.Getenv("APP_PORT"), "8080")

	// Fail if username is empty
	if app.auth.username == "" {
		log.Fatal("basic auth username must be provided")
	}
	// Fail if password is empty
	if app.auth.password == "" {
		log.Fatal("basic auth password must be provided")
	}

	// Initialize key manager
	keyManager, err := keys.NewKeyManager()
	if err != nil {
		log.Fatalf("Failed to initialize key manager: %v", err)
	}
	app.keyManager = keyManager

	// Initialize token service
	app.tokenService = token.NewService(keyManager)

	// Set up routes
	mux := http.NewServeMux()
	mux.HandleFunc("/", app.healthHandler)
	mux.HandleFunc("/token", app.basicAuth(app.tokenHandler))
	mux.HandleFunc("/introspect", app.basicAuth(app.introspectionHandler))
	mux.HandleFunc("/.well-known/jwks.json", app.jwksHandler)

	// Add Swagger UI
	SetupSwagger(mux)

	// Initialize server
	server := &http.Server{
		Addr:         ":" + port,
		Handler:      mux,
		IdleTimeout:  time.Minute,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 30 * time.Second,
	}

	log.Printf("starting OAuth2 server on %s", server.Addr)
	// TODO Look into ListenAndServeTLS to make the endpoint secure
	if err := server.ListenAndServe(); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}

// SetupSwagger adds Swagger UI endpoint to the provided ServeMux
func SetupSwagger(mux *http.ServeMux) {
	// Serve Swagger UI
	mux.HandleFunc("/swagger/", httpSwagger.WrapHandler)
}

// basicAuth middleware to protect endpoints with basic authentication
func (app *Application) basicAuth(next http.HandlerFunc) http.HandlerFunc {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		username, password, ok := request.BasicAuth()
		if ok {
			usernameHash := sha256.Sum256([]byte(username))
			passwordHash := sha256.Sum256([]byte(password))
			expectedUsernameHash := sha256.Sum256([]byte(app.auth.username))
			expectedPasswordHash := sha256.Sum256([]byte(app.auth.password))

			usernameMatch := (subtle.ConstantTimeCompare(usernameHash[:], expectedUsernameHash[:]) == 1)
			passwordMatch := (subtle.ConstantTimeCompare(passwordHash[:], expectedPasswordHash[:]) == 1)

			if usernameMatch && passwordMatch {
				next.ServeHTTP(writer, request)
				return
			}
		}

		// Return unauthorized if Basic Auth fails
		writer.Header().Set("WWW-Authenticate", `Basic realm="restricted", charset="UTF-8"`)
		http.Error(writer, "Unauthorized", http.StatusUnauthorized)
	})
}

// tokenHandler godoc
// @Summary      Issue a new OAuth2 token
// @Description  Creates a new JWT token using client credentials flow
// @Tags         oauth2
// @Accept       x-www-form-urlencoded
// @Produce      json
// @Param        grant_type formData string true "Grant type (must be client_credentials)"
// @Param        scope formData string false "Space-separated list of requested scopes"
// @Success      200  {object}  TokenResponse
// @Failure      400  {object}  ErrorResponse
// @Failure      401  {object}  ErrorResponse
// @Failure      405  {object}  ErrorResponse
// @Security     BasicAuth
// @Router       /token [post]
func (app *Application) tokenHandler(writer http.ResponseWriter, request *http.Request) {
	// Only accept POST method
	if request.Method != http.MethodPost {
		sendJSONError(writer, "invalid_request", "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// Parse content type
	contentType := request.Header.Get("Content-Type")
	var grantType, scope string

	if strings.Contains(contentType, "application/x-www-form-urlencoded") {
		// Parse form data
		err := request.ParseForm()
		if err != nil {
			sendJSONError(writer, "invalid_request", "Invalid form data", http.StatusBadRequest)
			return
		}
		grantType = request.Form.Get("grant_type")
		scope = request.Form.Get("scope")
	} else if strings.Contains(contentType, "application/json") {
		// Parse JSON data
		var tokenRequest TokenRequest
		err := json.NewDecoder(request.Body).Decode(&tokenRequest)
		if err != nil {
			sendJSONError(writer, "invalid_request", "Invalid JSON data", http.StatusBadRequest)
			return
		}
		grantType = tokenRequest.GrantType
		scope = tokenRequest.Scope
	} else {
		sendJSONError(writer, "invalid_request", "Unsupported content type", http.StatusBadRequest)
		return
	}

	// Validate grant type
	if grantType != "client_credentials" {
		sendJSONError(writer, "unsupported_grant_type", "Only client_credentials grant type is supported", http.StatusBadRequest)
		return
	}

	// Get client ID from basic auth
	clientID, _, _ := request.BasicAuth()

	// Create a token
	tokenString, err := app.tokenService.CreateToken(clientID, scope)
	if err != nil {
		sendJSONError(writer, "server_error", "Failed to generate token", http.StatusInternalServerError)
		return
	}

	// Send token response
	ttlSeconds := int(app.tokenService.TokenTTL().Seconds())
	response := TokenResponse{
		AccessToken: tokenString,
		TokenType:   "Bearer",
		ExpiresIn:   ttlSeconds,
		Scope:       scope,
	}

	writer.Header().Set("Content-Type", "application/json")
	writer.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(writer).Encode(response); err != nil {
		log.Printf("Failed to encode response: %v", err)
	}
}

// introspectionHandler godoc
// @Summary      Introspect a token
// @Description  Validates a token and returns its metadata if active
// @Tags         oauth2
// @Accept       x-www-form-urlencoded
// @Produce      json
// @Param        token formData string true "The token to introspect"
// @Success      200  {object}  map[string]interface{}
// @Failure      400  {object}  ErrorResponse
// @Failure      401  {object}  ErrorResponse
// @Failure      405  {object}  ErrorResponse
// @Security     BasicAuth
// @Router       /introspect [post]
func (app *Application) introspectionHandler(writer http.ResponseWriter, request *http.Request) {
	// Only accept POST method
	if request.Method != http.MethodPost {
		sendJSONError(writer, "invalid_request", "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// Parse form data
	err := request.ParseForm()
	if err != nil {
		sendJSONError(writer, "invalid_request", "Invalid form data", http.StatusBadRequest)
		return
	}

	// Get token from request
	tokenString := request.Form.Get("token")
	if tokenString == "" {
		sendJSONError(writer, "invalid_request", "Token parameter is required", http.StatusBadRequest)
		return
	}

	// Introspect token
	response := app.tokenService.GetIntrospectionResponse(tokenString)

	// Send introspection response
	writer.Header().Set("Content-Type", "application/json")
	writer.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(writer).Encode(response); err != nil {
		log.Printf("Failed to encode response: %v", err)
	}
}

// jwksHandler godoc
// @Summary      Get JWKS
// @Description  Returns the JSON Web Key Set for token verification
// @Tags         oauth2
// @Produce      json
// @Success      200  {object}  map[string]interface{}
// @Failure      405  {object}  ErrorResponse
// @Router       /.well-known/jwks.json [get]
func (app *Application) jwksHandler(writer http.ResponseWriter, request *http.Request) {
	// Only accept GET method
	if request.Method != http.MethodGet {
		sendJSONError(writer, "invalid_request", "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// Get key set
	keySet := app.keyManager.GetKeySet()

	writer.Header().Set("Content-Type", "application/json")
	writer.WriteHeader(http.StatusOK)

	buf, err := json.MarshalIndent(keySet, "", "  ")
	if err != nil {
		log.Printf("Failed to marshal key set: %v", err)
		http.Error(writer, "Internal Server Error", http.StatusInternalServerError)
		return
	}

	_, err = writer.Write(buf)
	if err != nil {
		log.Printf("Failed to write response: %v", err)
	}
}

// healthHandler godoc
// @Summary      Health check
// @Description  Returns the health status of the server
// @Tags         system
// @Produce      json
// @Success      200  {object}  HealthResponse
// @Router       / [get]
func (app *Application) healthHandler(writer http.ResponseWriter, request *http.Request) {
	response := HealthResponse{Status: "ok"}

	writer.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(writer).Encode(response); err != nil {
		http.Error(writer, "Failed to encode response", http.StatusInternalServerError)
		return
	}
}

// sendJSONError sends a standardized error response in JSON format
func sendJSONError(writer http.ResponseWriter, error string, description string, statusCode int) {
	response := ErrorResponse{
		Error:       error,
		Description: description,
	}

	writer.Header().Set("Content-Type", "application/json")
	writer.WriteHeader(statusCode)
	if err := json.NewEncoder(writer).Encode(response); err != nil {
		log.Printf("Failed to encode error response: %v", err)
	}
}
